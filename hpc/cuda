#include <bits/stdc++.h>
#include <chrono>

using namespace std;
using namespace std::chrono;

__global__ void add(int* A, int* B, int* C, int size) {
    int tid = blockIdx.x * blockDim.x + threadIdx.x;

    if (tid < size) {
        C[tid] = A[tid] + B[tid];
    }
}

__global__ void matrixMul(int* A, int* B, int* C, int M, int N, int K) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < M && col < K) {
        int sum = 0;
        for (int i = 0; i < N; i++) {
            sum += A[row * N + i] * B[i * K + col];
        }
        C[row * K + col] = sum;
    }
}

void print(int* vector, int size) {
    for (int i = 0; i < size; i++) {
        cout << vector[i] << " ";
    }
    cout << endl;
}

void printMatrix(int* matrix, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cout << matrix[i * cols + j] << " ";
        }
        cout << endl;
    }
    cout << endl;
}

void sequentialAddition(int* A, int* B, int* C, int size) {
    for (int i = 0; i < size; i++) {
        C[i] = A[i] + B[i];
    }
}

void sequentialMatrixMul(int* A, int* B, int* C, int M, int N, int K) {
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < K; j++) {
            int sum = 0;
            for (int k = 0; k < N; k++) {
                sum += A[i * N + k] * B[k * K + j];
            }
            C[i * K + j] = sum;
        }
    }
}

int main() {
    int N = 100000;

    // Vector addition
    int A[N], B[N], C[N];
    for (int i = 0; i < N; i++) {
        A[i] = rand() % 1000;
        B[i] = rand() % 1000;
    }

 
    cout << "Vector A: ";
    print(A, N);
    cout << "Vector B: ";
    print(B, N);

    // Sequential addition
    auto start = high_resolution_clock::now();
    sequentialAddition(A, B, C, N);
    auto stop = high_resolution_clock::now();
    auto seq_duration = duration_cast<microseconds>(stop - start);

    cout << "Sequential Addition: ";
    print(C, N);
    

    size_t vectorBytes = N * sizeof(int);

    int* X, * Y, * Z;
    cudaMalloc(&X, vectorBytes);
    cudaMalloc(&Y, vectorBytes);
    cudaMalloc(&Z, vectorBytes);

    cudaMemcpy(X, A, vectorBytes, cudaMemcpyHostToDevice);
    cudaMemcpy(Y, B, vectorBytes, cudaMemcpyHostToDevice);


    int threadsPerBlock = 256;
    int blocksPerGrid = (N + threadsPerBlock - 1) / threadsPerBlock;


    // Parallel addition
    start = high_resolution_clock::now();
    add<<<blocksPerGrid, threadsPerBlock>>>(X, Y, Z, N);
    cudaMemcpy(C, Z, vectorBytes, cudaMemcpyDeviceToHost);
    stop = high_resolution_clock::now();
    auto par_duration = duration_cast<microseconds>(stop - start);


    cout << "Parallel Addition: ";
    print(C, N);

    cout << "Sequential Addition Time: " << seq_duration.count() << " microseconds" << endl;
    cout << "Parallel Addition Time: " << par_duration.count() << " microseconds" << endl;





    // Matrix multiplication
    int M = 2, N_mat = 2, K = 2;
    int A_mat[2][2] = {{1, 2}, {3, 4}};
    int B_mat[2][2] = {{5, 6}, {7, 8}};
    int C_mat[2][2];

    cout << "Matrix A: " << endl;
    printMatrix((int*)A_mat, M, K);
    cout<<endl;

    cout << "Matrix B: " << endl;
    printMatrix((int*)B_mat, M, K);
    cout<<endl;

    // Sequential matrix multiplication
    start = high_resolution_clock::now();
    sequentialMatrixMul((int*)A_mat, (int*)B_mat, (int*)C_mat, M, N_mat, K);
    stop = high_resolution_clock::now();
    auto seq_mat_duration = duration_cast<microseconds>(stop - start);

    cout << "Sequential Matrix Multiplication: " << endl;
    printMatrix((int*)C_mat, M, K);

    // Parallel matrix multiplication
    int* X_mat, * Y_mat, * Z_mat;
    cudaMalloc(&X_mat, M * N_mat * sizeof(int));
    cudaMalloc(&Y_mat, N_mat * K * sizeof(int));
    cudaMalloc(&Z_mat, M * K * sizeof(int));

    cudaMemcpy(X_mat, A_mat, M * N_mat * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(Y_mat, B_mat, N_mat * K * sizeof(int), cudaMemcpyHostToDevice);

    threadsPerBlock = 16;
    blocksPerGrid = (M + threadsPerBlock - 1) / threadsPerBlock;

    start = high_resolution_clock::now();
    matrixMul<<<blocksPerGrid, threadsPerBlock>>>(X_mat, Y_mat, Z_mat, M, N_mat, K);
    cudaMemcpy(C_mat, Z_mat, M * K * sizeof(int), cudaMemcpyDeviceToHost);
    stop = high_resolution_clock::now();
    auto par_mat_duration = duration_cast<microseconds>(stop - start);

    cout << "Parallel Matrix Multiplication: " << endl;
    printMatrix((int*)C_mat, M, K);

    cout << "Sequential Matrix Multiplication Time: " << seq_mat_duration.count() << " microseconds" << endl;
    cout << "Parallel Matrix Multiplication Time: " << par_mat_duration.count() << " microseconds" << endl;
}
